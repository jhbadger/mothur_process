#!/usr/bin/env python

import argparse
import pandas as pd

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", required=True, help="input mothur taxsummary")
parser.add_argument("-n", "--number", default=100000, type = int, 
                    help="number to normalize to (default 100000)")
parser.add_argument("-r", "--rdp", help = "use rdp taxonomy", action='store_true')
parser.add_argument("-s", "--split", action='store_true',
                    help = "split file into phylum, class, order, etc.")
args = parser.parse_args()

meta = pd.DataFrame()
taxsummary = pd.read_csv(args.input, sep="\t")
taxsummary.set_index("taxon", drop = False)
cols = list(taxsummary.columns)
totpos = cols.index("total")

samples = filter(lambda x: "Unnamed:" not in x, cols[totpos+1:])
taxa = taxsummary["taxon"]

if args.rdp:
    tnames = ["r","k","p","c","o","f","g"]
    l = taxsummary["taxlevel"]
    t = [""]*len(taxa)
    for i in range(0, len(taxa)):
        t[i] = tnames[l[i]]+"__"+taxa[i]
    taxsummary["taxon"] = t

kingdoms=list(filter(lambda x: x[0:3]=="k__", list(taxa)))
for sample in samples:
    m =  sum(taxsummary[taxsummary['taxon'].isin(kingdoms)][sample])
    factor = args.number/(1.0*m)
    taxsummary[sample] = list(map(lambda x: int(round(x)), 
                              taxsummary[sample]*factor))

taxsummary["total"] = list(map(lambda x: int(round(x)), 
                           taxsummary["total"]*factor))

taxsummary.to_csv(args.input.replace(".summary", ".normalized.summary"),
                  sep = "\t", index=False)

taxsummary.drop("total", 1, inplace=True)
taxsummary.drop("taxlevel", 1, inplace=True)
taxsummary.drop("rankID", 1, inplace=True)
taxsummary.drop("daughterlevels", 1, inplace=True)

if args.split:
    for level in ['phylum', 'class', 'order', 'family', 'genus', 'species']:
        cols = list(meta.columns)
        cols += filter(lambda x: level[0]+"__" in x, partek.columns)
        t = partek[cols]
        t.to_csv(args.input.replace(".summary", "."+level+".normalized.csv"))

